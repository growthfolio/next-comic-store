// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/database.sqlite" // Path to SQLite file
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  imageUrl    String
  type        String   // "sample"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // OrderItem relation: A product can be part of many order items
  orderItems OrderItem[]
}

model Order {
  id             Int         @id @default(autoincrement())
  userId         Int
  user           User        @relation(fields: [userId], references: [id])
  customerName   String?     // Store customer name at time of order
  totalPrice     Float
  status         String      @default("Pending") // Pending, In Production, Completed, Cancelled
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Store items as a separate related model instead of JSON string
  items          OrderItem[]

  // Storing primary custom details directly on Order might be redundant if using OrderItem
  // Consider removing these if all details are in OrderItem
  customImageUrl String?
  notes          String?
}


// New Model: OrderItem
// Represents a single line item within an order.
// Can link to an existing Product or represent a custom item.
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])

  // Link to a Product if it's a standard item
  productId Int?     // Nullable, because custom items won't have a product ID
  product   Product? @relation(fields: [productId], references: [id])

  // Store details specific to this item in the order
  title     String   // Title at the time of order (could be product title or custom title)
  price     Float    // Price per unit at the time of order
  quantity  Int
  imageUrl  String?  // Image URL (from product or custom upload)
  isCustom  Boolean  @default(false)
  notes     String?  // Notes specific to this custom item

  // Optional: Add unique constraint if needed, e.g., unique(orderId, productId) for non-custom items
  // @@unique([orderId, productId])
}
